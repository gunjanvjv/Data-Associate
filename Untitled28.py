#!/usr/bin/env python
# coding: utf-8

# In[2]:


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')
import matplotlib.dates as mdates
import seaborn as sns


# In[3]:


df=pd.read_excel('Associate Dataset.XLSX')
df


# In[4]:


df.shape


# In[5]:


df.info()


# In[6]:


df.head()


# In[7]:


df.describe()


# In[8]:


df.dtypes


# In[9]:


pd.isnull(df)


# In[10]:


pd.isnull(df).sum()


# # Data Cleaning

# In[11]:


df.dropna(inplace=True)


# In[12]:


df


# In[13]:


df.shape


# # Data Exploration

# In[14]:


from datetime import datetime


df['Date'] = pd.to_datetime(df['Date']) 
df['day_of_year'] = df['Date'].dt.dayofyear
df['Time_Spent'] = pd.to_datetime(df['Time_Spent'])
df['Time_Spent'] = pd.to_numeric(df['Time_Spent'], errors='coerce')

total_time_spent = df['Time_Spent'].sum()
total_days = df['Date'].nunique()


df['hour'] = df['Time_Spent']


# In[15]:


df_grouped = df.groupby('day_of_year')['No_of_Leads'].mean() 


# In[16]:


total_leads = df_grouped.sum()
total_days = len(df_grouped)

average_leads = total_leads / total_days
print("Average Leads Generated per day: ", average_leads)


# In[17]:


df_grouped = df.groupby('day_of_year')['Time_Spent'].mean()


# In[18]:


total_time_spent = df['Time_Spent'].sum()
total_days = df['Date'].nunique()

average_time_spent_per_day = total_time_spent / total_days
print("Average Time Spent per Day:", average_time_spent_per_day)


# In[19]:


total_leads = len(df)
total_time_period = (df['Time_Spent'])

conversion_rate = total_leads / (total_time_period / 60)
print("Conversion Rate (Leads per hour):", conversion_rate)


# # Data Exploration

# In[20]:


plt.figure().set_figwidth(15)
x= df['Date']
y = df['Associate']
plt.plot(x,y)


# In[21]:


plt.figure().set_figwidth(15)
sns.histplot(df,bins=30, color='skyblue', edgecolor='black')
 
# Adding labels and title
plt.xlabel('Date')
plt.ylabel('Time_Spent_on_LG')
plt.title('Basic Histogram')
 
# Display the plot
plt.show()


# In[22]:


plt.figure().set_figwidth(20)

# plot histogram
plt.hist(df['Date'],bins=50, color='skyblue', edgecolor='black')
plt.xlabel('Date')
plt.ylabel('No_of_Leads')
plt.title('Histogram')
plt.show()


# In[23]:


name = df['Date'].head(100)
price = df['No_of_Leads'].head(100)

# Figure Size
fig, ax = plt.subplots(figsize =(16, 9))

# Horizontal Bar Plot
ax.barh(name, price)

# Remove axes splines
for s in ['top', 'bottom', 'left', 'right']:
  ax.spines[s].set_visible(False)

# Remove x, y Ticks
ax.xaxis.set_ticks_position('none')
ax.yaxis.set_ticks_position('none')

# Add padding between axes and labels
ax.xaxis.set_tick_params(pad = 5)
ax.yaxis.set_tick_params(pad = 10)

# Add x, y gridlines
ax.grid(b = True, color ='grey',
linestyle ='-.', linewidth = 0.5,
alpha = 0.2)

# Show top values 
ax.invert_yaxis()

# Add annotation to bars
for i in ax.patches:

    plt.text(i.get_width()+0.2, i.get_y()+0.5, 
  str(round((i.get_width()), 2)),
fontsize = 10, fontweight ='bold',
color ='grey')

# Add Plot Title
ax.set_title('No._of_Leads',
loc ='left', )


# Show Plot
plt.show()


# In[24]:


plt.figure().set_figwidth(15)
x= df['Date']
y = df['Time_Spent']
plt.scatter(x,y)


# In[25]:


plt.figure().set_figwidth(20)

# plot histogram
plt.hist(df['Time_Spent'],bins=50, color='skyblue', edgecolor='black')
plt.xlabel('Time-Spent')
plt.ylabel('No_of_Leads')
plt.title('Histogram')
plt.show()


# In[26]:



leads_by_associate = df.groupby('Associate')['No_of_Leads'].count().reset_index()

print("Total number of leads generated by each associate:")
print(leads_by_associate)


# In[28]:


average_leads_by_associate = df.groupby('Associate')['No_of_Leads'].mean().reset_index()

print("Average number of leads generated by each associate:")
print(average_leads_by_associate)


# In[29]:


# Calculate the standard deviation of the number of leads for each associate
consistency_by_associate = df.groupby('Associate')['No_of_Leads'].std().reset_index()

# Find the associate with the lowest standard deviation (most consistent)
most_consistent_associate = consistency_by_associate.loc[consistency_by_associate['No_of_Leads'].idxmin()]

print("Most consistent associate in lead generation:")
print(most_consistent_associate)


# In[ ]:




